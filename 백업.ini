import discord
from discord.ext import commands
import yt_dlp as youtube_dl
from collections import deque
import asyncio

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.voice_states = True

bot = commands.Bot(command_prefix="!", intents=intents)

song_queue = deque()

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
}

ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn',
}

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.2):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')

    @classmethod
    async def from_url(cls, url, *, loop, stream=False):
        ydl = youtube_dl.YoutubeDL(ytdl_format_options)
        info = ydl.extract_info(url, download=False)
        url2 = info['url']
        title = info.get('title')
        fmt = discord.FFmpegPCMAudio(url2, **ffmpeg_options)
        return cls(fmt, data=info)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')

@bot.command(aliases=['입장'])  # 입장 명령어가 알리아스로 등록
async def join(ctx):
    if ctx.author.voice:
        channel = ctx.author.voice.channel
        await channel.connect()
        await ctx.send(f"{channel} 채널에 입장했습니다!")
    else:
        await ctx.send("먼저 음성 채널에 접속해 주세요.")

@bot.command(aliases=['퇴장'])  # 퇴장 명령어가 알리아스로 등록
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("봇이 음성 채널에서 퇴장했습니다.")
    else:
        await ctx.send("봇이 음성 채널에 연결되어 있지 않습니다.")

@bot.command(name='명령어')
async def command_list(ctx):
    embed = discord.Embed(title="명령어 목록", description='', color=discord.Color.purple())
    embed.add_field(name='!입장', value='봇을 음성 채널에 입장시킵니다.', inline=False)
    embed.add_field(name='!퇴장', value='봇을 음성 채널에서 퇴장시킵니다.', inline=True)
    embed.add_field(name='!재생 유튜브 URL', value='유튜브 URL을 입력하여 첫 번째 음악을 재생합니다.', inline=False)
    embed.add_field(name='!추가 유튜브 URL', value='유튜브 URL을 입력하여 플레이리스트에 음악을 추가합니다.', inline=False)
    embed.add_field(name='!일시정지', value='음악을 일시 정지합니다.', inline=False)
    embed.add_field(name='!재개', value='음악을 다시 재생합니다.', inline=False)
    embed.add_field(name='!스킵', value='현재 재생 중인 음악을 중지하고 다음 음악을 재생합니다.', inline=False)
    embed.add_field(name='!플레이리스트', value='현재 플레이리스트에 등록된 음악 목록을 보여줍니다.', inline=False)
    await ctx.send(embed=embed)

@bot.command(name='일시정지')
async def pause(ctx):
    if ctx.voice_client.is_playing():
        ctx.voice_client.pause()
        await ctx.send("음악이 일시 정지되었습니다.")
    else:
        await ctx.send("현재 음악이 재생되고 있지 않습니다.")

@bot.command(name='재개')
async def resume(ctx):
    if ctx.voice_client.is_paused():
        ctx.voice_client.resume()
        await ctx.send("음악이 다시 재생됩니다.")
    else:
        await ctx.send("음악이 일시 정지 중이지 않거나 이미 재생 중입니다.")

async def play_next(ctx):
    """재생할 다음 노래를 큐에서 가져와 재생"""
    if song_queue:
        song = song_queue.popleft()  # popleft()로 큐에서 노래를 가져옴
        ctx.voice_client.play(song, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop))
        await ctx.send(f"현재 재생 중: {song.title}")

@bot.command(name='재생')  # 재생 명령어에 대해 name 설정
async def play(ctx, *, url):
    if ctx.voice_client is None:
        if ctx.author.voice:
            channel = ctx.author.voice.channel
            await channel.connect()
        else:
            await ctx.send("먼저 음성 채널에 접속해 주세요.")
            return

    async with ctx.typing():
        # 플레이리스트에 첫 번째 노래 추가
        player = await YTDLSource.from_url(url, loop=bot.loop, stream=True)
        song_queue.append(player)

        # 재생 중인 노래가 없으면 첫 번째 노래를 재생
        if not ctx.voice_client.is_playing() and not ctx.voice_client.is_paused():
            await play_next(ctx)

        # await ctx.send(f'첫 번째 노래가 재생됩니다: {player.title}')

@bot.command(name='추가')
async def add(ctx, *, url):
    """플레이리스트에 노래를 추가하는 명령어"""
    player = await YTDLSource.from_url(url, loop=bot.loop, stream=True)
    song_queue.append(player)
    await ctx.send(f'노래가 플레이리스트에 추가되었습니다: {player.title}')

@bot.command(name='플레이리스트')
async def playlist(ctx):
    """Shows the current playlist"""
    if not song_queue:
        await ctx.send("현재 플레이리스트에 등록된 노래가 없습니다.")
        return

    playlist = "\n".join([f"{index + 1}. {song.title}" for index, song in enumerate(song_queue)])
    await ctx.send(f"현재 플레이리스트:\n{playlist}")

@bot.command(name='스킵')
async def skip(ctx, song_number: int = None):
    """현재 재생 중인 노래를 끊고, 플레이리스트에서 지정한 번호의 노래로 넘어갑니다."""
    if ctx.voice_client.is_playing():
        if song_number is None:
            # 번호를 지정하지 않으면 현재 노래를 건너뛰고 다음 노래로 넘어감
            ctx.voice_client.stop()
            await ctx.send("현재 노래를 건너뛰고, 다음 노래를 재생합니다.")
            await play_next(ctx)
        else:
            # 번호가 지정되었으면 플레이리스트에서 해당 번호의 노래로 넘어감
            if 1 <= song_number <= len(song_queue):
                # song_number - 1은 0 기반 인덱스이므로, 그에 맞춰서 노래를 찾습니다
                song_to_skip = song_queue[song_number - 1]  
                ctx.voice_client.stop()

                # 스킵된 노래를 제외하고 큐에서 남은 노래를 재정렬
                del song_queue[song_number - 1]  # 지정된 노래를 큐에서 제거

                await ctx.send(f"{song_to_skip.title}로 바로 넘어갑니다.")
                await play_next(ctx)  # 건너뛰고 나서 다음 노래를 재생
            else:
                await ctx.send(f"플레이리스트에 {song_number}번 노래는 없습니다.")
    else:
        await ctx.send("현재 재생되고 있는 노래가 없습니다.")


@play.before_invoke
async def ensure_voice(ctx):
    if ctx.voice_client is None:
        if ctx.author.voice:
            await ctx.author.voice.channel.connect()
        else:
            await ctx.send("먼저 음성 채널에 접속해 주세요.")
            raise commands.CommandError("Author not connected to a voice channel.")
    elif ctx.voice_client.is_playing():
        ctx.voice_client.stop()

bot.run("MTMyNTM2OTM4MzY0MzY0Mzk2NQ.GANHE8.Z6qH6Ah7fkpqRH5MQK6XXLowkgNWkSf-BG0q2I")
